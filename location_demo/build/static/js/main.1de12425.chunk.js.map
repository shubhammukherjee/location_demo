{"version":3,"sources":["logo.svg","MapComponent.js","Demo.js","App.js","reportWebVitals.js","index.js"],"names":["MyMapComponent","props","src","lat","long","height","width","Demo","state","prevProps","coords","this","setState","latitude","longitude","isGeolocationAvailable","isGeolocationEnabled","style","display","justifyContent","marginBottom","value","onChange","e","target","React","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,mECIAA,EAFQ,SAACC,GAAD,OACtB,wBAAQC,IAAG,wCAAmCD,EAAME,IAAzC,YAAgDF,EAAMG,KAAtD,sBAAgFC,OAAO,MAAMC,MAAM,SCCzGC,E,4MACJC,MAAQ,CACFL,IAAM,KACNC,KAAO,M,wDAGX,SAAmBK,GACZA,EAAUC,SAAWC,KAAKV,MAAMS,QACnCC,KAAKC,SAAS,CACVT,IAAMQ,KAAKV,MAAMS,OAAOG,SACxBT,KAAOO,KAAKV,MAAMS,OAAOI,c,oBAIjC,WAAU,IAAD,OACL,EAAmBH,KAAKH,MAAjBL,EAAP,EAAOA,IAAIC,EAAX,EAAWA,KACX,OAAQO,KAAKV,MAAMc,uBAEdJ,KAAKV,MAAMe,qBAEZL,KAAKV,MAAMS,OACX,gCACA,sBAAKO,MAAO,CAACC,QAAQ,OAAOC,eAAgB,eAAeC,aAAc,QAAzE,UACI,gCACA,6CADA,IACwB,uBACxB,uBAAOC,MAAOlB,EAAKmB,SAAU,SAACC,GAAD,OAAO,EAAKX,SAAS,CAACT,IAAIoB,EAAEC,OAAOH,cAEhE,gCACA,8CADA,IACyB,uBACzB,uBAAOA,MAAOjB,EAAMkB,SAAU,SAACC,GAAD,OAAO,EAAKX,SAAS,CAACR,KAAKmB,EAAEC,OAAOH,iBAIlE,cAAC,EAAD,CAAgBlB,IAAKQ,KAAKH,MAAML,IAAKC,KAAMO,KAAKH,MAAMJ,UAI1D,mEAlBA,6DAFA,gF,GAjBOqB,IAAMC,WA0CVC,uBAAW,CACtBC,gBAAiB,CACbC,oBAAoB,GAExBC,oBAAqB,KAJVH,CAKZpB,GCrCYwB,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,EAAD,SCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1de12425.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { GoogleMap, Marker } from \"react-google-maps\"\r\n\r\nconst MyMapComponent = (props) =>\r\n <iframe src={`http://maps.google.com/maps?q=${props.lat},${props.long}&z=16&output=embed`} height=\"450\" width=\"600\"></iframe>\r\nexport default MyMapComponent;\r\n","import React from \"react\";\r\nimport { geolocated } from \"react-geolocated\";\r\nimport MyMapComponent from './MapComponent'\r\n\r\nclass Demo extends React.Component {\r\n  state = {\r\n        lat : null,\r\n        long : null\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.coords !== this.props.coords)\r\n        this.setState({\r\n            lat : this.props.coords.latitude,\r\n            long : this.props.coords.longitude\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {lat,long} = this.state\r\n        return !this.props.isGeolocationAvailable ? (\r\n            <div>Your browser does not support Geolocation</div>\r\n        ) : !this.props.isGeolocationEnabled ? (\r\n            <div>Geolocation is not enabled</div>\r\n        ) : this.props.coords ? (\r\n            <div>\r\n            <div style={{display:'flex',justifyContent: 'space-evenly',marginBottom: '20px'}}>\r\n                <div>\r\n                <label>Latitude</label> <br/>\r\n                <input value={lat} onChange={(e) => this.setState({lat:e.target.value}) }/>\r\n                </div>\r\n                <div>\r\n                <label>Longitude</label> <br/>\r\n                <input value={long} onChange={(e) => this.setState({long:e.target.value}) }/>\r\n                </div>\r\n                </div>\r\n               \r\n                <MyMapComponent lat={this.state.lat} long={this.state.long} />\r\n            </div>\r\n\r\n        ) : (\r\n            <div>Getting the location data&hellip; </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default geolocated({\r\n    positionOptions: {\r\n        enableHighAccuracy: false,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n})(Demo);\r\n\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Demo from './Demo.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Demo />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}